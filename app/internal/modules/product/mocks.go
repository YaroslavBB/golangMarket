// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/modules/product/interface.go

// Package product is a generated GoMock package.
package product

import (
	reflect "reflect"
	producte "task/internal/entity/producte"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPriceHistory mocks base method.
func (m *MockRepository) AddPriceHistory(tx *sqlx.Tx, product producte.ProductForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPriceHistory", tx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPriceHistory indicates an expected call of AddPriceHistory.
func (mr *MockRepositoryMockRecorder) AddPriceHistory(tx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPriceHistory", reflect.TypeOf((*MockRepository)(nil).AddPriceHistory), tx, product)
}

// AddPriceHistoryProduct mocks base method.
func (m *MockRepository) AddPriceHistoryProduct(tx *sqlx.Tx, typeID, priceHistoryID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPriceHistoryProduct", tx, typeID, priceHistoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPriceHistoryProduct indicates an expected call of AddPriceHistoryProduct.
func (mr *MockRepositoryMockRecorder) AddPriceHistoryProduct(tx, typeID, priceHistoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPriceHistoryProduct", reflect.TypeOf((*MockRepository)(nil).AddPriceHistoryProduct), tx, typeID, priceHistoryID)
}

// AddProduct mocks base method.
func (m *MockRepository) AddProduct(tx *sqlx.Tx, product producte.ProductForm) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", tx, product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepositoryMockRecorder) AddProduct(tx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepository)(nil).AddProduct), tx, product)
}

// AddProductType mocks base method.
func (m *MockRepository) AddProductType(tx *sqlx.Tx, product producte.ProductForm, productID int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductType", tx, product, productID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProductType indicates an expected call of AddProductType.
func (mr *MockRepositoryMockRecorder) AddProductType(tx, product, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductType", reflect.TypeOf((*MockRepository)(nil).AddProductType), tx, product, productID)
}

// DeletePriceHistory mocks base method.
func (m *MockRepository) DeletePriceHistory(tx *sqlx.Tx, historyID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePriceHistory", tx, historyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePriceHistory indicates an expected call of DeletePriceHistory.
func (mr *MockRepositoryMockRecorder) DeletePriceHistory(tx, historyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePriceHistory", reflect.TypeOf((*MockRepository)(nil).DeletePriceHistory), tx, historyID)
}

// DeletePriceHistoryProduct mocks base method.
func (m *MockRepository) DeletePriceHistoryProduct(tx *sqlx.Tx, typeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePriceHistoryProduct", tx, typeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePriceHistoryProduct indicates an expected call of DeletePriceHistoryProduct.
func (mr *MockRepositoryMockRecorder) DeletePriceHistoryProduct(tx, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePriceHistoryProduct", reflect.TypeOf((*MockRepository)(nil).DeletePriceHistoryProduct), tx, typeID)
}

// DeleteProduct mocks base method.
func (m *MockRepository) DeleteProduct(tx *sqlx.Tx, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", tx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockRepositoryMockRecorder) DeleteProduct(tx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockRepository)(nil).DeleteProduct), tx, productID)
}

// DeleteTypeProduct mocks base method.
func (m *MockRepository) DeleteTypeProduct(tx *sqlx.Tx, typeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTypeProduct", tx, typeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTypeProduct indicates an expected call of DeleteTypeProduct.
func (mr *MockRepositoryMockRecorder) DeleteTypeProduct(tx, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTypeProduct", reflect.TypeOf((*MockRepository)(nil).DeleteTypeProduct), tx, typeID)
}

// GetAllId mocks base method.
func (m *MockRepository) GetAllId(tx *sqlx.Tx, productID int) ([]producte.AllId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllId", tx, productID)
	ret0, _ := ret[0].([]producte.AllId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllId indicates an expected call of GetAllId.
func (mr *MockRepositoryMockRecorder) GetAllId(tx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllId", reflect.TypeOf((*MockRepository)(nil).GetAllId), tx, productID)
}

// GetProductIdAndTypeIdByName mocks base method.
func (m *MockRepository) GetProductIdAndTypeIdByName(tx *sqlx.Tx, name, form string) (producte.AllId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductIdAndTypeIdByName", tx, name, form)
	ret0, _ := ret[0].(producte.AllId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductIdAndTypeIdByName indicates an expected call of GetProductIdAndTypeIdByName.
func (mr *MockRepositoryMockRecorder) GetProductIdAndTypeIdByName(tx, name, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductIdAndTypeIdByName", reflect.TypeOf((*MockRepository)(nil).GetProductIdAndTypeIdByName), tx, name, form)
}

// GetProductIdByName mocks base method.
func (m *MockRepository) GetProductIdByName(tx *sqlx.Tx, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductIdByName", tx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductIdByName indicates an expected call of GetProductIdByName.
func (mr *MockRepositoryMockRecorder) GetProductIdByName(tx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductIdByName", reflect.TypeOf((*MockRepository)(nil).GetProductIdByName), tx, name)
}

// GetTypeIdByProduct mocks base method.
func (m *MockRepository) GetTypeIdByProduct(tx *sqlx.Tx, product producte.ProductForm, productID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypeIdByProduct", tx, product, productID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypeIdByProduct indicates an expected call of GetTypeIdByProduct.
func (mr *MockRepositoryMockRecorder) GetTypeIdByProduct(tx, product, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypeIdByProduct", reflect.TypeOf((*MockRepository)(nil).GetTypeIdByProduct), tx, product, productID)
}

// LoadAllProducts mocks base method.
func (m *MockRepository) LoadAllProducts(tx *sqlx.Tx) ([]producte.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllProducts", tx)
	ret0, _ := ret[0].([]producte.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllProducts indicates an expected call of LoadAllProducts.
func (mr *MockRepositoryMockRecorder) LoadAllProducts(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllProducts", reflect.TypeOf((*MockRepository)(nil).LoadAllProducts), tx)
}

// LoadProductFormByID mocks base method.
func (m *MockRepository) LoadProductFormByID(tx *sqlx.Tx, id int) ([]producte.ProductForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProductFormByID", tx, id)
	ret0, _ := ret[0].([]producte.ProductForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProductFormByID indicates an expected call of LoadProductFormByID.
func (mr *MockRepositoryMockRecorder) LoadProductFormByID(tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProductFormByID", reflect.TypeOf((*MockRepository)(nil).LoadProductFormByID), tx, id)
}

// UpdateProductAmount mocks base method.
func (m *MockRepository) UpdateProductAmount(tx *sqlx.Tx, product producte.ProductForm, typeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductAmount", tx, product, typeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductAmount indicates an expected call of UpdateProductAmount.
func (mr *MockRepositoryMockRecorder) UpdateProductAmount(tx, product, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductAmount", reflect.TypeOf((*MockRepository)(nil).UpdateProductAmount), tx, product, typeID)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddNewProduct mocks base method.
func (m *MockService) AddNewProduct(tx *sqlx.Tx, product producte.ProductForm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewProduct", tx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewProduct indicates an expected call of AddNewProduct.
func (mr *MockServiceMockRecorder) AddNewProduct(tx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewProduct", reflect.TypeOf((*MockService)(nil).AddNewProduct), tx, product)
}

// DeleteProductById mocks base method.
func (m *MockService) DeleteProductById(tx *sqlx.Tx, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductById", tx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductById indicates an expected call of DeleteProductById.
func (mr *MockServiceMockRecorder) DeleteProductById(tx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductById", reflect.TypeOf((*MockService)(nil).DeleteProductById), tx, productID)
}

// LoadAllProducts mocks base method.
func (m *MockService) LoadAllProducts(tx *sqlx.Tx) ([]producte.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllProducts", tx)
	ret0, _ := ret[0].([]producte.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllProducts indicates an expected call of LoadAllProducts.
func (mr *MockServiceMockRecorder) LoadAllProducts(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllProducts", reflect.TypeOf((*MockService)(nil).LoadAllProducts), tx)
}

// LoadProductFormByID mocks base method.
func (m *MockService) LoadProductFormByID(tx *sqlx.Tx, id int) ([]producte.ProductForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProductFormByID", tx, id)
	ret0, _ := ret[0].([]producte.ProductForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProductFormByID indicates an expected call of LoadProductFormByID.
func (mr *MockServiceMockRecorder) LoadProductFormByID(tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProductFormByID", reflect.TypeOf((*MockService)(nil).LoadProductFormByID), tx, id)
}
