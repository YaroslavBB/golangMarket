// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/modules/autorisation/interface.go

// Package autorisation is a generated GoMock package.
package autorisation

import (
	reflect "reflect"
	autorisatione "task/internal/entity/autorisatione"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// LoadUserByUsername mocks base method.
func (m *MockRepository) LoadUserByUsername(tx *sqlx.Tx, username string) (*autorisatione.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserByUsername", tx, username)
	ret0, _ := ret[0].(*autorisatione.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserByUsername indicates an expected call of LoadUserByUsername.
func (mr *MockRepositoryMockRecorder) LoadUserByUsername(tx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserByUsername", reflect.TypeOf((*MockRepository)(nil).LoadUserByUsername), tx, username)
}

// SaveUser mocks base method.
func (m *MockRepository) SaveUser(tx *sqlx.Tx, user autorisatione.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockRepositoryMockRecorder) SaveUser(tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockRepository)(nil).SaveUser), tx, user)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// LoadUserByUsername mocks base method.
func (m *MockService) LoadUserByUsername(tx *sqlx.Tx, username string) (*autorisatione.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserByUsername", tx, username)
	ret0, _ := ret[0].(*autorisatione.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserByUsername indicates an expected call of LoadUserByUsername.
func (mr *MockServiceMockRecorder) LoadUserByUsername(tx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserByUsername", reflect.TypeOf((*MockService)(nil).LoadUserByUsername), tx, username)
}

// SaveUser mocks base method.
func (m *MockService) SaveUser(tx *sqlx.Tx, user autorisatione.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockServiceMockRecorder) SaveUser(tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockService)(nil).SaveUser), tx, user)
}
